19/2/2022
------------------
1.difference b/w array and arraylist?
2.about serializable?
3.write code to merge 2 integer arrays?
4.about super keyword?
5.about constructer?
6.difference b/w @RequestParam and @querParam?
@RequestParam and @PathVariable are used to extract values from the HTTP request
As the name suggests, @RequestParam is used to get the request parameters from URL, also known as query parameters, while @PathVariable extracts values from URI.
7.what is the default container in spring boot?
Tomcat container
8.About @Transactional and it's methhods?
9.solid principles in java?
10.functional programming in java 1.8?
11.diff b/w predicate,cosumer,supplier,function in java1.8?
12 diff b/w soap and rest service?

9.solid principles in java?
Single Responsibility Principle (SRP)
Open-Closed Principle (OCP)
Liskov Substitution Principle (LSP)
Interface Segregation Principle (ISP)
Dependency Inversion Principle (DIP)


10.core java desing patterns?
11.limitations with @autowire?
12.http response code for recored already exist?
would be '409 Conflict

13.difference bitween collection.stream().foreach() and collection.foreach()?
Collection.stream().forEach()
----------------------------
i.Collection.stream().forEach() is also used for iterating the collection but it first converts the collection to the stream and then iterates over the stream of collection.
ii.Unlike Collection.forEach() it does not execute in any specific order, i.e. the order is not defined.
iii. During structure modification in the collection, the exception will be thrown later.
iV. If iteration is happening over the synchronized collection, then it does not lock the collection.

Collection.forEach()
-------------------
i.Collection.forEach() uses the collections iterator.
ii. If always execute in the iteration order of iterable, if one is specified.
iii. If we perform any structural modification in the collection by using the collection.forEach() it will immediately throw an exception.
iv. If iteration is happening over the synchronized collection, then it locks the collection and holds it across all the calls.

11.diff b/w predicate,cosumer,supplier,function in java1.8?
1.there are few functional interfaces namely Consumer, Supplier, Predicate and Functions are most crucial
Consumer
------------
A Consumer is a functional interface that accepts a single input and returns no output
Consumer interface has two methods:
void accept(T t);
default Consumer<T> andThen(Consumer<? super T> after);
The accept method is the Single Abstract Method (SAM) which accepts a single argument of type T. Whereas, the other one andThen is a default method used for composition.
consumer interface has specific implementation types for integer, double and long types with IntConsumer, DoubleConsumer, and LongConsumer as shown below:
IntConsumer void accept(int x);
DoubleConsumer void accept(double x);
LongConsumer void accept(long x);

Supplier
-------------------
A Supplier is a simple interface which indicates that this implementation is a supplier of results
The supplier has only one method get() and does not have any other default and static methods.
One of the primary usage of this interface to enable deferred execution. This means delaying the execution until it is needed
The supplier interface has its primitive variants such as IntSupplier, DoubleSupplier and so on as shown below.
IntSupplier int getAsInt();
DoubleSupplier double getAsDouble();
LongSupplier long getAsLong();
BooleanSupplier boolean getAsBoolean();

Predicate
------------------------
A Predicate interface represents a boolean-valued-function of an argument. This is mainly used to filter data from a Java Stream.
The filter method of a stream accepts a predicate to filter the data and return a new stream satisfying the predicate.
A predicate has a test() method which accepts an argument and returns a boolean value.
Predicate also provides a few default and static method for composition and other purposes:
default Predicate<T> and(Predicate<? super T> other);
default Predicate<T> or(Predicate<? super T> other);
static <T> Predicate<T> isEquals(Object targetRef);
default Predicate<T> negate();

Function
---------------------------
A Function interface is more of a generic one that takes one argument and produces a result.
This has a Single Abstract Method (SAM) apply which accepts an argument of a type T and produces a result of type R.
One of the common use cases of this interface is Stream.map method. This is shown as below:

12 diff b/w soap and rest service?

SOAP stands for Simple Object Access Protocol whereas REST stands for Representational State Transfer.
SOAP is a protocol whereas REST is an architectural pattern.
SOAP uses service interfaces to expose its functionality to client applications while REST uses Uniform Service locators to access to the components on the hardware device.
SOAP needs more bandwidth for its usage whereas REST doesnâ€™t need much bandwidth.
Comparing SOAP vs REST API, SOAP only works with XML formats whereas REST work with plain text, XML, HTML and JSON.
SOAP cannot make use of REST whereas REST can make use of SOAP.